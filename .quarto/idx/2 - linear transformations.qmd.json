{"title":"1.2 - linear transformations","markdown":{"yaml":{"title":"1.2 - linear transformations","format":{"revealjs":{"slide-number":true}},"editor_options":{"chunk_output_type":"console","mode":"source"}},"headingText":"Linear transformations of image data","containsRefs":false,"markdown":"\n\n\n![](images/clipboard-1624064392.png)\n\n## Linear combinations and dot products {.smaller}\n\n-   A *linear combination* of a vector is simply a weighted sum of its coordinates\n\n-   Linear combinations are often represented by *dot products*\n\n-   The *dot product* of two $p-$dimensional vectors is a single number\n\n-   E.g., consider the dot product of $u = (3,1)$ with weighting vector $w = (-1, 4)$:\n\n. . .\n\n$$<u,w> = u \\cdot w = (3, 1) \\times \\begin{pmatrix} -1 \\\\ 4 \\end{pmatrix}$$\n\n. . .\n\n$$ = 3\\cdot -1 + 1\\cdot 4 = 1$$\n\n. . .\n\n-   Note that dot products require one vector written as a row and the other as a column vector.\n\n## Example: Kwik Trip {.smaller}\n\n-   At Kwik Trip, a corn dog costs \\$1.99; a milkshake costs \\$5.29, and a 9.9 oz bag of takis costs \\$5.29.\\\n-   You go to Kwik Trip and buy 2 corn dogs, a milkshake, and 5 bags of takis.\n-   How can you represent $C$, the total cost, as the dot product of two vectors? How would you define these vectors? What is $C$?\n\n$$u = ?$$ $$w = ?$$ $$C = <u,w> = ?$$\n\n## Example: linear regression {.smaller}\n\n-   In linear regression, we often represent fitted values as the dot product between and $x$ vector and a $\\hat\\beta$ vector.\n-   Suppose you've fit a linear regression model of house price on the size (in square meters) and number of bedrooms.\\\n-   You have the following output:\n\n``` r\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   55957.2    22896.1   2.443   0.0187 *  \nsize           989.4       195.6   5.056  2.04e-06 ***\nbedrooms     10291.9      3688.2   2.791   0.0076 ** \n```\n\n-   GOAL: predict the price of a home with 200 sq m and 3 bedrooms.\n-   This is the dot product $<x,\\hat\\beta>$ with:\n\n$$x = ?$$ $$\\hat\\beta = ?$$\n\n## Geometric interpretation {.smaller}\n\n-   The dot product of two $p$-dimensional vectors is a single number\n\n-   The sign of this number is related to the angle between the vectors:\n\n    ![](images/clipboard-4174632890.png){width=\"900\"}\n\n. . .\n\n$$<u,v> = 3\\cdot 1 + 1\\cdot 4 = 7 > 0$$\n\n. . .\n\n$$<u,w> = 3\\cdot -1 + 1 \\cdot 3 = 0$$\n\n. . .\n\n$$<u,x> = 3\\cdot -2 + 1 \\cdot -3 = -9 < 0$$\n\n## Geometric interpretation {.smaller}\n\nIt turns out:\n\n$$\n<u,v> = ||u||_2 ||v||_2 cos(\\theta)\n$$\n\nwhere $\\theta$ is the angle formed by $u$ and $v$:\n\n![](images/clipboard-3448825483.png){width=\"584\" fig-align=\"center\"}\n\nNote also: ***orthogonal*** (i.e., perpendicular) vectors have dot product = 0!\n\n## Linear transformations = Dot products by matrices\n\n-   The dot product of two $p-$dimensional vectors is always a single number, representing the angle between them.\n-   If a $p$-dimensional vector is dot-multiplied by a $p\\times m$ *matrix*, the result is a **linear transformation:** a mapping of $p$ dimensional space onto $m$ dimensional space.\n\n## Matrix multiplication: a refresher {.smaller}\n\nConsider the $2 \\times 2$ matrix $A = \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}$ and 2-dimensional vector $u = (1,2)$.\n\nThen:\n\n$$Au = \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 3\\cdot 1 + 2\\cdot 2 \\\\ 1\\cdot 1 + 2\\cdot 2  \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 7 \\\\ 5  \\end{pmatrix}$$\n\n. . .\n\nNote that we have *transformed* one 2-dimensional vector into another 2-dimensional vector!\n\n## Matrix multiplication dimensions\n\nWhen multiplying matrices $A$ ($n\\times p$) and $B$ ($p \\times m$):\n\n-   $ncol(A)$ must equal $nrow(B)$\n-   $AB$ has dimension $n \\times m$ = $nrow(A) \\times ncol(B)$\n\n## Matrix multiplication dimensions {.smaller auto-animate=\"true\"}\n\n-   Reconsider the $2\\times 2$ matrix $A = \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}$ and vector $u = (1,2)$.\n-   To multiply $Au$, $u$ must be expressed as a $2 \\times 1$ matrix: $$\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}$$\n-   Result of $Au$ is $2\\times 1$ ($ncol(A) \\times nrow(u)$)\n\n. . .\n\n-   To reverse order of multiplication, we would have to express $u$ as a row vector:\n\n$$u^T A = \\begin{pmatrix}1 & 2 \\end{pmatrix} \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}$$\n\n. . .\n\n$$ = \\begin{pmatrix}1\\cdot 3 + 2\\cdot 1 & 2 \\cdot 2 + 2 \\cdot 2 \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 5 & 8 \\end{pmatrix}$$\n\n## Linear transformation: a visual {.smaller}\n\n::: column\n-   In the following slides, let's consider a transformation of the $4 \\times 2$ matrix of row vectors:\n\n$$\\color{CornflowerBlue}{X = {\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}}$$\n\n-   Consider this a \"data frame\" of $n = 4$ rows and $p=2$ columns.\n\n-   We will apply the transformation matrix $A = \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}$.\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'center'\n\nlibrary(tidyverse)\n\ndf1 <- data.frame(\n  x = c(0,0,1,1), y = c(0,1,1,0)\n)\n\n\n# Create base\nbase <- ggplot() +\n  scale_x_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) +\n    scale_y_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 14) + \n  theme(panel.grid.minor = element_blank()) + \n  labs(x='', y='')\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\n\np1\n```\n:::\n\n## First row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 0 & 0 \\end{pmatrix}} \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \\color{Orange}{\\begin{pmatrix} 0 & 0 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\nlibrary(patchwork)\n\ndf1 <- data.frame(\n  x = 0, y = 0\n)\ndf2 <- data.frame(x = 0, y = 0)\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Second row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 1 & 0 \\end{pmatrix}} \n\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \n\\color{Orange}{\\begin{pmatrix} 3 & 1 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,1), y = c(0,0)\n)\ndf2 <- data.frame(x = c(0,3), y = c(0,1))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Third row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 1 & 1 \\end{pmatrix}} \n\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \n\\color{Orange}{\\begin{pmatrix} 5 & 3 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,1,0), y = c(0,0,1)\n)\ndf2 <- data.frame(x = c(0,3,5), y = c(0,1,3))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Fourth row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 0 & 1 \\end{pmatrix}} \n\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \n\\color{Orange}{\\begin{pmatrix} 2 & 2 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,0,1,1), y = c(0,1,1,0)\n)\ndf2 <- data.frame(x = c(0,2,5,3), y = c(0,2,3,1))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Full transformation\n\n$$\\color{CornflowerBlue}{{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}}\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix} = \\color{Orange}{\\begin{pmatrix} 0 & 0 \\\\ 3 & 1 \\\\ 5 & 3 \\\\ 2 & 2 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,0,1,1,0), y = c(0,1,1,0,0)\n)\ndf2 <- data.frame(x = c(0,2,5,3,0), y = c(0,2,3,1,0))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue') + \n  geom_path(aes(x = x, y = y), data = df1,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')+\n  geom_path(aes(x = x, y = y), data = df2,col='orange')\np1 + p2\n```\n\n\n## Matrix algebra in `R` {auto-animate=\"true\"}\n\nTo form and multiply matrices:\n\n```{r}\n#| echo: TRUE\nbluecoords <- matrix(c(0,0,\n              1,0,\n              1,1,\n              0,1),\n            nrow = 4, ncol = 2,\n            byrow = TRUE\n            )\n```\n\n## Matrix algebra in `R` {auto-animate=\"true\"}\n\nTo form and multiply matrices:\n\n```{r}\n#| echo: TRUE\nbluecoords <- matrix(c(0,0,\n              1,0,\n              1,1,\n              0,1),\n            nrow = 4, ncol = 2,\n            byrow = TRUE\n            )\n\nA <- matrix(c(3, 1,\n              2, 2),\n            nrow = 2, ncol = 2,\n            byrow=TRUE\n            )\n```\n\n## Matrix algebra in `R` {auto-animate=\"true\"}\n\nTo form and multiply matrices:\n\n```{r}\n#| echo: TRUE\nbluecoords <- matrix(c(0,0,\n              1,0,\n              1,1,\n              0,1),\n            nrow = 4, ncol = 2,\n            byrow = TRUE\n            )\n\nA <- matrix(c(3, 1,\n              2, 2),\n            nrow = 2, ncol = 2,\n            byrow=TRUE\n            )\nbluecoords %*% A\n```\n\n## Identity matrix {.smaller}\n\n-   The *identity matrix* $I$ is the matrix equivalent of \"1\".\n-   Square $p\\times p$ matrix with 1's on the diagonal and 0's elsewhere:\n\n$$\nI = \\begin{pmatrix} 1 & 0 & \\dots & 0 \\\\ \n0 & 1 & \\dots& 0 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & \\dots & 1\n\\end{pmatrix}\n$$\n\n-   For any $n \\times p$ matrix $X$, $XI = X$.\n\n## Identity matrix\n\n$$\\color{CornflowerBlue}{{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}}\\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\color{CornflowerBlue}{\\begin{pmatrix}0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,0,1,1,0), y = c(0,1,1,0,0)\n)\ndf2 <- data.frame(x = c(0,2,5,3,0), y = c(0,2,3,1,0))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue') + \n  geom_path(aes(x = x, y = y), data = df1,col='cornflowerblue')\np1 + p1\n```\n\n## Matrix inverses: going backward {.smaller}\n\n::: {.column width=\"60%\"}\n-   $\\color{CornflowerBlue}{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}} \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix} =  \\color{Orange}{\\begin{pmatrix} 0 & 0 \\\\ 3 & 1 \\\\ 5 & 3 \\\\ 2 & 2 \\end{pmatrix}}$\n\n-   $\\color{Orange}{\\begin{pmatrix} 0 & 0 \\\\ 3 & 1 \\\\ 5 & 3 \\\\ 2 & 2 \\end{pmatrix}} \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}^{-1}= \\color{CornflowerBlue}{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}$\n:::\n\n::: {.column width=\"40%\"}\n```{r}\n#| fig-width: 10\n#| fig-height: 5\n#| fig-align: center\np1 + p2\n```\n\n```{r}\n#| fig-width: 10\n#| fig-height: 5\n#| fig-align: center\np2 + p1\n```\n:::\n\n## What is an inverse?\n\nThe **inverse** of a square $p\\times p$ matrix $A$ is notated $A^{-1}$ and is the matrix such that:\n\n$$\nA A^{-1} =I\n$$\n\nwhere $I$ is the identity matrix.\n\n## Inverses in `R`\n\n```{r}\n#| echo: true\nAinverse <- solve(A)\nAinverse\n```\n\n## Inverses in `R`\n\n```{r}\n#| echo: true\nAinverse <- solve(A)\nAinverse\n\norangecoords <- matrix(c(0,0,\n                         3,1,\n                         5,3,\n                         2,2),\n                       nrow = 4, ncol = 2,\n                       byrow = TRUE\n                       )\n```\n\n## Inverses in `R`\n\n```{r}\n#| echo: true\nAinverse <- solve(A)\nAinverse\n\norangecoords <- matrix(c(0,0,\n                         3,1,\n                         5,3,\n                         2,2),\n                       nrow = 4, ncol = 2,\n                       byrow = TRUE\n                       )\n\nround(orangecoords %*% Ainverse,1)\n```\n\n## Finding arbitrary transformation matrix {.smaller}\n\n::: column\n-   The matrix $A$ is often referred to as a *transformation matrix*\n-   It *transforms* the [blue]{style=\"color: cornflowerblue\"} coordinates into [orange]{style=\"color: orange\"} coordinates\n-   What if have the transformation, but we want to find a matrix? E.g., what matrix $B$ is such that $\\color{CornflowerBlue}{X}B = \\color{forestgreen}{W}$ with $\\color{forestgreen}{W = \\begin{pmatrix} 0 & 0 \\\\ 2 & -3 \\\\ 0 & -2 \\\\ -2 & 1 \\end{pmatrix}}$?\n:::\n\n::: column\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,1,1,0,0), y = c(0,0,1,1,0)\n)\n\nB <- matrix(c(-2, 1,\n              2,-3),\n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\n\ntransformation <- as.matrix(df1) %*% B\n\ndf2 <- data.frame(transformation)\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue') \np2 <- base + geom_point(data = df2, aes(x = X1, y = X2), size = 3,col='forestgreen')\np1 + p2\n```\n:::\n\n## Finding arbitrary transformation matrix\n\nWe can find $B$ (must be $2 \\times 2$) using some matrix algebra, given we know coordinates $\\color{CornflowerBlue}{X}$ ($4 \\times 2$) and $\\color{forestgreen}{W}$ ($4 \\times 2$):\n\n$$ \\color{CornflowerBlue}{X}B =\\color{forestgreen}{W}$$\n\n. . .\n\n$$ \\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}B =\\color{CornflowerBlue}{X^T}\\color{forestgreen}{W}$$\n\n. . .\n\n$$ \\left(\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}\\right)^{-1}\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}B = \\left(\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}\\right)^{-1}\\color{CornflowerBlue}{X^T}\\color{forestgreen}{W}$$\n\n. . .\n\n$$ B = \\left(\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}\\right)^{-1}\\color{CornflowerBlue}{X^T}\\color{forestgreen}{W}$$\n\n## Transforming [blue]{style=\"color: cornflowerblue\"} into [green]{style=\"color: forestgreen\"}\n\n```{r}\n#| echo: true\n\ngreencoords <- matrix(c(0,0,\n                        2,-3,\n                        0,-2,\n                        -2,1),\n                      nrow = 4, ncol = 2,\n                      byrow = TRUE\n                      )\nB <- solve(t(bluecoords)%*%bluecoords) %*% t(bluecoords) %*% greencoords\n\nB\n\nbluecoords%*% B\n```\n\n## `ggplot` code {.smaller}\n\n```{r}\n#| eval: false\n#| echo: true\n\nlibrary(ggplot2)\nlibrary(patchwork) #for adding plots side-by-side\n\nbluedf <- data.frame(bluecoords)\ngreendf <- data.frame(greencoords)\n\n\n# Create base\nbase <- ggplot() +\n  scale_x_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) +\n    scale_y_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 14) + \n  theme(panel.grid.minor = element_blank()) + \n  labs(x='', y='')\n\n# Add points\nbluepoints <- base +  \n  geom_point(data = bluedf, aes(x = X1, y = X2), size = 3,col='cornflowerblue') \ngreenpoints <- base + \n  geom_point(data = df2, aes(x = X1, y = X2), size = 3,col='forestgreen')\np1 + p2\n```\n\n## Transformations commute!\n\nIf $A$ transforms [blue]{style=\"color: cornflowerblue\"} into [orange]{style=\"color: orange\"} and $B$ transforms [orange]{style=\"color: orange\"} into [green]{style=\"color: forestgreen\"}, then $AB$ transforms [blue]{style=\"color: cornflowerblue\"} into [green]{style=\"color: forestgreen\"}.\n\nSee activity!\n\n## Transformations don't have to be $p\\rightarrow p$ {.smaller}\n\n- In the examples we've considered so far, we've transformed 2-dimensional space to 2-dimensional space.\n- We don't have to go $p\\rightarrow p$: we can go $p\\rightarrow m$ with $m<p$, or $p\\rightarrow q$ with $q > p$.  \n- In this class, we will most frequently encounter *dimension reduction*: that is. transformations into *lower dimensional* space ($p \\rightarrow m$ with $m < p$).\n- There are 2 ways to \"transform down\":\n  - Use a lower dimensional transformation matrix;\n  - Use a rank deficient transformation matrix\n  \n## Lower dimension $A$ {.smaller}\n\n- The easiest way to transform down is to use a lower-dimension transformation matrix.\n\n- Consider 3-dimensional row vector $u = (-1, 3, 2)$ and $3 \\times 2$ transformation matrix $A = \\begin{pmatrix}3 & 2 \\\\ 1 & 1 \\\\ -1 & 4\\end{pmatrix}$  \n\n$$ u A = (-1, 3, 2)\\begin{pmatrix}3 & 2 \\\\ 1 & 1 \\\\ -1 & 4\\end{pmatrix}$$\n\n. . .\n\n$$= (-3+3-2 , -2+3+8)$$\n\n. . .\n\n$$ = (-2, 9)$$\n\nThus we have transformed the 3-dimensional $u$ into 2-dimensional space.\n\n## Rank deficient $A$ {.smaller}\n\n- In the previous example it was obvious that using a $3\\times 2$ matrix $A$ would transform 3-dimensional $u$ into 2 dimensions\n- But downward transformations can be more subtle!\n- Consider now:\n\n$$A = \\begin{pmatrix} 1 & 4 & 2 \\\\ 2 & 5 & 1 \\\\ 3 & 6 & 0 \\end{pmatrix}$$\n\n. . .\n\n$$u A = (-1, 3, 2)\\begin{pmatrix} 1 & 4 & 2 \\\\ 2 & 5 & 1 \\\\ 3 & 6 & 0 \\end{pmatrix}$$\n\n. . .\n\n$$ = (11, 23, 1)$$\n\n...so it *looks* like we've stayed in 3 dimensions!\n\n## Rank deficient $A$ \n\nBut let's see what happens if we do this to several $u$'s:\n\n::: column\n```{r}\n#| echo: true\nset.seed(1100)\nn <- 100\nUmatrix <- matrix(runif(3*n), \n                  nrow = n, \n                  ncol = 3)\nhead(Umatrix) \n```\n::: \n\n::: column\n```{r}\n#| echo: true\nA <- matrix(c(1,4,2,\n              2,5,1,\n              3,6,0\n              ), \n            nrow = 3, ncol = 3, \n            byrow=TRUE\n            )\nUA <- Umatrix %*% A\nhead(UA)\n```\n:::\n\n## Plotting $U$ and $UA$ {.smaller}\n\n::: column\n$U$ is truly 3D:\n```{r}\nlibrary(matlib)\nlibrary(rgl)\npar(mar = c(0,0,0,0), oma = c(0,0,0,0)) # Set margins to zero\nplot3d( \n        x=Umatrix[,1], y=Umatrix[,2], z=Umatrix[,3],colvar=NULL,\n        bty='b2',pch=19,cex=1.2,\n  xlab=\"x\", ylab=\"y\", zlab=\"z\")\nrglwidget(width = 400, height = 400)\n```\n:::\n\n::: column\n$UA$ is collapsed to a 2D plane!\n```{r}\npar(mar = c(0,0,0,0), oma = c(0,0,0,0)) # Set margins to zero\nplot3d( \n        x=UA[,1], y=UA[,2], z=UA[,3],colvar=NULL,\n        bty='b2',pch=19,cex=1.2,\n  xlab=\"x\", ylab=\"y\", zlab=\"z\")\nrglwidget(width = 400, height = 400)\n```\n:::\n\n## What gives with $A$? \n\n$$A =\\begin{pmatrix} 1 & 4 & 2 \\\\ 2 & 5 & 1 \\\\ 3 & 6 & 0 \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 1 & 4 & 4-2\\cdot 1 \\\\ 2 & 5 & 5-2\\cdot2 \\\\ 3 & 6 & 6-2\\cdot 3 \\end{pmatrix}$$\n\n. . .\n\nSo the 3rd column is a *linear combination* of the first two!\n\n## Determinants and rank deficiency {.smaller}\n\n-  A *rank deficient* transformation matrix has redundancy in rows or columns\n- In other words, one or more of the columns is a linear combination of the others (equivalent for rows)\n- A *rank deficient*, $p\\times p$ matrix $A$ has determinant = 0\n\n```{r}\n#| echo: true\nA\ndet(A)\n```\n\n- *Determinant* = scalar-valued function of a square matrix\n\n$$det \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} =ad-bc$$\n- ...increasingly more complex for higher $p$! (use `R` in general)\n\n\n\n## Rank deficiency in 2 dimensions {.smaller}\n\nConsider the $n=50$, $p=2$-dimensional vectors in the `cars` data set:\n\n```{r}\n#| fig.width: 3\n#| fig.height: 3\n#| fig.align: center\n\nggplot(data = cars) + \n  geom_point(aes(x = speed, y = dist)) + \n  theme_classic() + \n  labs(x='Speed (mph)', y = 'Stopping distance (ft)')\n```\n\n\n## Rank deficiency in 2 dimensions {.smaller}\n\n- Let's apply the $2 \\times 2$ transformation matrix $A = \\begin{pmatrix} 1 &0\\\\ 0&0\\end{pmatrix}$\n- This collapses the data set down to just its $x$ coordinates: \n\n::: {.column width=\"60%\"}\n```{r}\n#| echo: true\nA <- matrix(c(1,0,\n              0,0\n              ), \n            nrow = 2, ncol = 2,\n            byrow=TRUE\n            )\ndet(A)\ncars_transformed <- data.frame(as.matrix(cars) %*% A)\n```\n:::\n\n::: {.column width=\"40%\"} \n```{r}\n#| fig.width: 4\n#| fig.height: 3\n#| fig.align: center\nggplot() + \n geom_point(aes(x = speed, y = dist, color = '(x,y)'), data = cars) + \n  geom_point(aes(x = X1, y = X2, color = '(x,y)*A'), data = cars_transformed) + \n    labs(x='Speed (mph)', y = 'Stopping distance (ft)',color='') + \n  theme_classic() \n\n```\n:::\n\n## Quiz question 1 \n\nLet $T$ be a transformation matrix represented by:\n\n$$T = \\begin{pmatrix} 1 & 0 \\\\ 2 & -3 \\end{pmatrix}$$\n\nDoes this matrix produce a $2 \\rightarrow 2$ or a $2 \\rightarrow 1$ transformation?\n\nFind the determinant to answer this question!\n\n## Verifying quiz question 1\n\n```{r}\n#| echo: true\n#| eval: false\n\nT <- matrix(c(1, 0, \n              2, -3), \n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\nn <- 20\nsomedata <- matrix(runif(n*2), \n                   nrow = n, ncol = 2)\nsomedata_transformed <- somedata %*% T\nplot(somedata, main = 'somedata')\nplot(somedata_transformed, main = 'somedata_transformed')\n```\n\n\n::: column\n```{r}\n#| fig.width: 3\n#| fig.height: 3\n\nT <- matrix(c(1, 0, \n              2, -3), \n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\nn <- 20\nsomedata <- matrix(runif(n*2), \n                   nrow = n, ncol = 2)\n\nsomedata_transformed <- somedata %*% T\npar(mar = c(5,4,2,0))\nplot(somedata, main = 'somedata', xlab='',ylab='')\n```\n:::\n\n::: column\n```{r}\n#| fig.width: 3\n#| fig.height: 3\npar(mar = c(5,4,2,0))\nplot(somedata_transformed, main = 'somedata_transformed', xlab='',ylab='')\n```\n:::\n\n\n\n## Quiz question 2 \n\nLet $W$ be a transformation matrix represented by:\n\n$$W = \\begin{pmatrix} 1 & 3 \\\\ 2 & 6 \\end{pmatrix}$$\n\nDoes this matrix produce a $2 \\rightarrow 2$ or a $2 \\rightarrow 1$ transformation?  Answer in 2 ways:\n\n- Finding the determinant of the matrix;\n- Identifying in what way the columns are linear combinations of each other\n\n## Verifying quiz question 2\n\n```{r}\n#| echo: true\nW <- matrix(c(1, 3, \n              2, 6), \n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\nsomedata_transformed <- somedata %*% W\n```\n\n\n::: column\n```{r}\n#| fig.width: 4\n#| fig.height: 4\npar(mar = c(5,4,2,0))\nplot(somedata, main = 'somedata', xlab='',ylab='')\n```\n:::\n\n::: column\n```{r}\n#| fig.width: 4\n#| fig.height: 4\npar(mar = c(5,4,2,0))\nplot(somedata_transformed, main = 'somedata_transformed', xlab='',ylab='')\n```\n:::\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n## Linear transformations of image data\n\n![](images/clipboard-1624064392.png)\n\n## Linear combinations and dot products {.smaller}\n\n-   A *linear combination* of a vector is simply a weighted sum of its coordinates\n\n-   Linear combinations are often represented by *dot products*\n\n-   The *dot product* of two $p-$dimensional vectors is a single number\n\n-   E.g., consider the dot product of $u = (3,1)$ with weighting vector $w = (-1, 4)$:\n\n. . .\n\n$$<u,w> = u \\cdot w = (3, 1) \\times \\begin{pmatrix} -1 \\\\ 4 \\end{pmatrix}$$\n\n. . .\n\n$$ = 3\\cdot -1 + 1\\cdot 4 = 1$$\n\n. . .\n\n-   Note that dot products require one vector written as a row and the other as a column vector.\n\n## Example: Kwik Trip {.smaller}\n\n-   At Kwik Trip, a corn dog costs \\$1.99; a milkshake costs \\$5.29, and a 9.9 oz bag of takis costs \\$5.29.\\\n-   You go to Kwik Trip and buy 2 corn dogs, a milkshake, and 5 bags of takis.\n-   How can you represent $C$, the total cost, as the dot product of two vectors? How would you define these vectors? What is $C$?\n\n$$u = ?$$ $$w = ?$$ $$C = <u,w> = ?$$\n\n## Example: linear regression {.smaller}\n\n-   In linear regression, we often represent fitted values as the dot product between and $x$ vector and a $\\hat\\beta$ vector.\n-   Suppose you've fit a linear regression model of house price on the size (in square meters) and number of bedrooms.\\\n-   You have the following output:\n\n``` r\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   55957.2    22896.1   2.443   0.0187 *  \nsize           989.4       195.6   5.056  2.04e-06 ***\nbedrooms     10291.9      3688.2   2.791   0.0076 ** \n```\n\n-   GOAL: predict the price of a home with 200 sq m and 3 bedrooms.\n-   This is the dot product $<x,\\hat\\beta>$ with:\n\n$$x = ?$$ $$\\hat\\beta = ?$$\n\n## Geometric interpretation {.smaller}\n\n-   The dot product of two $p$-dimensional vectors is a single number\n\n-   The sign of this number is related to the angle between the vectors:\n\n    ![](images/clipboard-4174632890.png){width=\"900\"}\n\n. . .\n\n$$<u,v> = 3\\cdot 1 + 1\\cdot 4 = 7 > 0$$\n\n. . .\n\n$$<u,w> = 3\\cdot -1 + 1 \\cdot 3 = 0$$\n\n. . .\n\n$$<u,x> = 3\\cdot -2 + 1 \\cdot -3 = -9 < 0$$\n\n## Geometric interpretation {.smaller}\n\nIt turns out:\n\n$$\n<u,v> = ||u||_2 ||v||_2 cos(\\theta)\n$$\n\nwhere $\\theta$ is the angle formed by $u$ and $v$:\n\n![](images/clipboard-3448825483.png){width=\"584\" fig-align=\"center\"}\n\nNote also: ***orthogonal*** (i.e., perpendicular) vectors have dot product = 0!\n\n## Linear transformations = Dot products by matrices\n\n-   The dot product of two $p-$dimensional vectors is always a single number, representing the angle between them.\n-   If a $p$-dimensional vector is dot-multiplied by a $p\\times m$ *matrix*, the result is a **linear transformation:** a mapping of $p$ dimensional space onto $m$ dimensional space.\n\n## Matrix multiplication: a refresher {.smaller}\n\nConsider the $2 \\times 2$ matrix $A = \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}$ and 2-dimensional vector $u = (1,2)$.\n\nThen:\n\n$$Au = \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 3\\cdot 1 + 2\\cdot 2 \\\\ 1\\cdot 1 + 2\\cdot 2  \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 7 \\\\ 5  \\end{pmatrix}$$\n\n. . .\n\nNote that we have *transformed* one 2-dimensional vector into another 2-dimensional vector!\n\n## Matrix multiplication dimensions\n\nWhen multiplying matrices $A$ ($n\\times p$) and $B$ ($p \\times m$):\n\n-   $ncol(A)$ must equal $nrow(B)$\n-   $AB$ has dimension $n \\times m$ = $nrow(A) \\times ncol(B)$\n\n## Matrix multiplication dimensions {.smaller auto-animate=\"true\"}\n\n-   Reconsider the $2\\times 2$ matrix $A = \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}$ and vector $u = (1,2)$.\n-   To multiply $Au$, $u$ must be expressed as a $2 \\times 1$ matrix: $$\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}$$\n-   Result of $Au$ is $2\\times 1$ ($ncol(A) \\times nrow(u)$)\n\n. . .\n\n-   To reverse order of multiplication, we would have to express $u$ as a row vector:\n\n$$u^T A = \\begin{pmatrix}1 & 2 \\end{pmatrix} \\begin{pmatrix} 3 & 2 \\\\ 1 & 2 \\end{pmatrix}$$\n\n. . .\n\n$$ = \\begin{pmatrix}1\\cdot 3 + 2\\cdot 1 & 2 \\cdot 2 + 2 \\cdot 2 \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 5 & 8 \\end{pmatrix}$$\n\n## Linear transformation: a visual {.smaller}\n\n::: column\n-   In the following slides, let's consider a transformation of the $4 \\times 2$ matrix of row vectors:\n\n$$\\color{CornflowerBlue}{X = {\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}}$$\n\n-   Consider this a \"data frame\" of $n = 4$ rows and $p=2$ columns.\n\n-   We will apply the transformation matrix $A = \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}$.\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'center'\n\nlibrary(tidyverse)\n\ndf1 <- data.frame(\n  x = c(0,0,1,1), y = c(0,1,1,0)\n)\n\n\n# Create base\nbase <- ggplot() +\n  scale_x_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) +\n    scale_y_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 14) + \n  theme(panel.grid.minor = element_blank()) + \n  labs(x='', y='')\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\n\np1\n```\n:::\n\n## First row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 0 & 0 \\end{pmatrix}} \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \\color{Orange}{\\begin{pmatrix} 0 & 0 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\nlibrary(patchwork)\n\ndf1 <- data.frame(\n  x = 0, y = 0\n)\ndf2 <- data.frame(x = 0, y = 0)\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Second row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 1 & 0 \\end{pmatrix}} \n\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \n\\color{Orange}{\\begin{pmatrix} 3 & 1 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,1), y = c(0,0)\n)\ndf2 <- data.frame(x = c(0,3), y = c(0,1))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Third row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 1 & 1 \\end{pmatrix}} \n\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \n\\color{Orange}{\\begin{pmatrix} 5 & 3 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,1,0), y = c(0,0,1)\n)\ndf2 <- data.frame(x = c(0,3,5), y = c(0,1,3))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Fourth row\n\n$$\\color{CornflowerBlue}{\\begin{pmatrix} 0 & 1 \\end{pmatrix}} \n\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}  = \n\\color{Orange}{\\begin{pmatrix} 2 & 2 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,0,1,1), y = c(0,1,1,0)\n)\ndf2 <- data.frame(x = c(0,2,5,3), y = c(0,2,3,1))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')\np1 + p2\n```\n\n## Full transformation\n\n$$\\color{CornflowerBlue}{{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}}\\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix} = \\color{Orange}{\\begin{pmatrix} 0 & 0 \\\\ 3 & 1 \\\\ 5 & 3 \\\\ 2 & 2 \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,0,1,1,0), y = c(0,1,1,0,0)\n)\ndf2 <- data.frame(x = c(0,2,5,3,0), y = c(0,2,3,1,0))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue') + \n  geom_path(aes(x = x, y = y), data = df1,col='cornflowerblue')\np2 <- base + geom_point(data = df2, aes(x = x, y = y), size = 3,col='orange')+\n  geom_path(aes(x = x, y = y), data = df2,col='orange')\np1 + p2\n```\n\n\n## Matrix algebra in `R` {auto-animate=\"true\"}\n\nTo form and multiply matrices:\n\n```{r}\n#| echo: TRUE\nbluecoords <- matrix(c(0,0,\n              1,0,\n              1,1,\n              0,1),\n            nrow = 4, ncol = 2,\n            byrow = TRUE\n            )\n```\n\n## Matrix algebra in `R` {auto-animate=\"true\"}\n\nTo form and multiply matrices:\n\n```{r}\n#| echo: TRUE\nbluecoords <- matrix(c(0,0,\n              1,0,\n              1,1,\n              0,1),\n            nrow = 4, ncol = 2,\n            byrow = TRUE\n            )\n\nA <- matrix(c(3, 1,\n              2, 2),\n            nrow = 2, ncol = 2,\n            byrow=TRUE\n            )\n```\n\n## Matrix algebra in `R` {auto-animate=\"true\"}\n\nTo form and multiply matrices:\n\n```{r}\n#| echo: TRUE\nbluecoords <- matrix(c(0,0,\n              1,0,\n              1,1,\n              0,1),\n            nrow = 4, ncol = 2,\n            byrow = TRUE\n            )\n\nA <- matrix(c(3, 1,\n              2, 2),\n            nrow = 2, ncol = 2,\n            byrow=TRUE\n            )\nbluecoords %*% A\n```\n\n## Identity matrix {.smaller}\n\n-   The *identity matrix* $I$ is the matrix equivalent of \"1\".\n-   Square $p\\times p$ matrix with 1's on the diagonal and 0's elsewhere:\n\n$$\nI = \\begin{pmatrix} 1 & 0 & \\dots & 0 \\\\ \n0 & 1 & \\dots& 0 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & \\dots & 1\n\\end{pmatrix}\n$$\n\n-   For any $n \\times p$ matrix $X$, $XI = X$.\n\n## Identity matrix\n\n$$\\color{CornflowerBlue}{{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}}\\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\color{CornflowerBlue}{\\begin{pmatrix}0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}$$\n\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,0,1,1,0), y = c(0,1,1,0,0)\n)\ndf2 <- data.frame(x = c(0,2,5,3,0), y = c(0,2,3,1,0))\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue') + \n  geom_path(aes(x = x, y = y), data = df1,col='cornflowerblue')\np1 + p1\n```\n\n## Matrix inverses: going backward {.smaller}\n\n::: {.column width=\"60%\"}\n-   $\\color{CornflowerBlue}{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}} \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix} =  \\color{Orange}{\\begin{pmatrix} 0 & 0 \\\\ 3 & 1 \\\\ 5 & 3 \\\\ 2 & 2 \\end{pmatrix}}$\n\n-   $\\color{Orange}{\\begin{pmatrix} 0 & 0 \\\\ 3 & 1 \\\\ 5 & 3 \\\\ 2 & 2 \\end{pmatrix}} \\begin{pmatrix} 3 & 1 \\\\ 2 & 2 \\end{pmatrix}^{-1}= \\color{CornflowerBlue}{\\begin{pmatrix} 0 & 0 \\\\ 1 & 0 \\\\ 1 & 1 \\\\ 0 & 1 \\\\ \\end{pmatrix}}$\n:::\n\n::: {.column width=\"40%\"}\n```{r}\n#| fig-width: 10\n#| fig-height: 5\n#| fig-align: center\np1 + p2\n```\n\n```{r}\n#| fig-width: 10\n#| fig-height: 5\n#| fig-align: center\np2 + p1\n```\n:::\n\n## What is an inverse?\n\nThe **inverse** of a square $p\\times p$ matrix $A$ is notated $A^{-1}$ and is the matrix such that:\n\n$$\nA A^{-1} =I\n$$\n\nwhere $I$ is the identity matrix.\n\n## Inverses in `R`\n\n```{r}\n#| echo: true\nAinverse <- solve(A)\nAinverse\n```\n\n## Inverses in `R`\n\n```{r}\n#| echo: true\nAinverse <- solve(A)\nAinverse\n\norangecoords <- matrix(c(0,0,\n                         3,1,\n                         5,3,\n                         2,2),\n                       nrow = 4, ncol = 2,\n                       byrow = TRUE\n                       )\n```\n\n## Inverses in `R`\n\n```{r}\n#| echo: true\nAinverse <- solve(A)\nAinverse\n\norangecoords <- matrix(c(0,0,\n                         3,1,\n                         5,3,\n                         2,2),\n                       nrow = 4, ncol = 2,\n                       byrow = TRUE\n                       )\n\nround(orangecoords %*% Ainverse,1)\n```\n\n## Finding arbitrary transformation matrix {.smaller}\n\n::: column\n-   The matrix $A$ is often referred to as a *transformation matrix*\n-   It *transforms* the [blue]{style=\"color: cornflowerblue\"} coordinates into [orange]{style=\"color: orange\"} coordinates\n-   What if have the transformation, but we want to find a matrix? E.g., what matrix $B$ is such that $\\color{CornflowerBlue}{X}B = \\color{forestgreen}{W}$ with $\\color{forestgreen}{W = \\begin{pmatrix} 0 & 0 \\\\ 2 & -3 \\\\ 0 & -2 \\\\ -2 & 1 \\end{pmatrix}}$?\n:::\n\n::: column\n```{r}\n#| fig-width: 8\n#| fig-height: 4\n#| fig-align: 'center'\n\ndf1 <- data.frame(\n  x = c(0,1,1,0,0), y = c(0,0,1,1,0)\n)\n\nB <- matrix(c(-2, 1,\n              2,-3),\n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\n\ntransformation <- as.matrix(df1) %*% B\n\ndf2 <- data.frame(transformation)\n\n\np1 <- base + geom_point(data = df1, aes(x = x, y = y), size = 3,col='cornflowerblue') \np2 <- base + geom_point(data = df2, aes(x = X1, y = X2), size = 3,col='forestgreen')\np1 + p2\n```\n:::\n\n## Finding arbitrary transformation matrix\n\nWe can find $B$ (must be $2 \\times 2$) using some matrix algebra, given we know coordinates $\\color{CornflowerBlue}{X}$ ($4 \\times 2$) and $\\color{forestgreen}{W}$ ($4 \\times 2$):\n\n$$ \\color{CornflowerBlue}{X}B =\\color{forestgreen}{W}$$\n\n. . .\n\n$$ \\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}B =\\color{CornflowerBlue}{X^T}\\color{forestgreen}{W}$$\n\n. . .\n\n$$ \\left(\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}\\right)^{-1}\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}B = \\left(\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}\\right)^{-1}\\color{CornflowerBlue}{X^T}\\color{forestgreen}{W}$$\n\n. . .\n\n$$ B = \\left(\\color{CornflowerBlue}{X^T}\\color{CornflowerBlue}{X}\\right)^{-1}\\color{CornflowerBlue}{X^T}\\color{forestgreen}{W}$$\n\n## Transforming [blue]{style=\"color: cornflowerblue\"} into [green]{style=\"color: forestgreen\"}\n\n```{r}\n#| echo: true\n\ngreencoords <- matrix(c(0,0,\n                        2,-3,\n                        0,-2,\n                        -2,1),\n                      nrow = 4, ncol = 2,\n                      byrow = TRUE\n                      )\nB <- solve(t(bluecoords)%*%bluecoords) %*% t(bluecoords) %*% greencoords\n\nB\n\nbluecoords%*% B\n```\n\n## `ggplot` code {.smaller}\n\n```{r}\n#| eval: false\n#| echo: true\n\nlibrary(ggplot2)\nlibrary(patchwork) #for adding plots side-by-side\n\nbluedf <- data.frame(bluecoords)\ngreendf <- data.frame(greencoords)\n\n\n# Create base\nbase <- ggplot() +\n  scale_x_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) +\n    scale_y_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 14) + \n  theme(panel.grid.minor = element_blank()) + \n  labs(x='', y='')\n\n# Add points\nbluepoints <- base +  \n  geom_point(data = bluedf, aes(x = X1, y = X2), size = 3,col='cornflowerblue') \ngreenpoints <- base + \n  geom_point(data = df2, aes(x = X1, y = X2), size = 3,col='forestgreen')\np1 + p2\n```\n\n## Transformations commute!\n\nIf $A$ transforms [blue]{style=\"color: cornflowerblue\"} into [orange]{style=\"color: orange\"} and $B$ transforms [orange]{style=\"color: orange\"} into [green]{style=\"color: forestgreen\"}, then $AB$ transforms [blue]{style=\"color: cornflowerblue\"} into [green]{style=\"color: forestgreen\"}.\n\nSee activity!\n\n## Transformations don't have to be $p\\rightarrow p$ {.smaller}\n\n- In the examples we've considered so far, we've transformed 2-dimensional space to 2-dimensional space.\n- We don't have to go $p\\rightarrow p$: we can go $p\\rightarrow m$ with $m<p$, or $p\\rightarrow q$ with $q > p$.  \n- In this class, we will most frequently encounter *dimension reduction*: that is. transformations into *lower dimensional* space ($p \\rightarrow m$ with $m < p$).\n- There are 2 ways to \"transform down\":\n  - Use a lower dimensional transformation matrix;\n  - Use a rank deficient transformation matrix\n  \n## Lower dimension $A$ {.smaller}\n\n- The easiest way to transform down is to use a lower-dimension transformation matrix.\n\n- Consider 3-dimensional row vector $u = (-1, 3, 2)$ and $3 \\times 2$ transformation matrix $A = \\begin{pmatrix}3 & 2 \\\\ 1 & 1 \\\\ -1 & 4\\end{pmatrix}$  \n\n$$ u A = (-1, 3, 2)\\begin{pmatrix}3 & 2 \\\\ 1 & 1 \\\\ -1 & 4\\end{pmatrix}$$\n\n. . .\n\n$$= (-3+3-2 , -2+3+8)$$\n\n. . .\n\n$$ = (-2, 9)$$\n\nThus we have transformed the 3-dimensional $u$ into 2-dimensional space.\n\n## Rank deficient $A$ {.smaller}\n\n- In the previous example it was obvious that using a $3\\times 2$ matrix $A$ would transform 3-dimensional $u$ into 2 dimensions\n- But downward transformations can be more subtle!\n- Consider now:\n\n$$A = \\begin{pmatrix} 1 & 4 & 2 \\\\ 2 & 5 & 1 \\\\ 3 & 6 & 0 \\end{pmatrix}$$\n\n. . .\n\n$$u A = (-1, 3, 2)\\begin{pmatrix} 1 & 4 & 2 \\\\ 2 & 5 & 1 \\\\ 3 & 6 & 0 \\end{pmatrix}$$\n\n. . .\n\n$$ = (11, 23, 1)$$\n\n...so it *looks* like we've stayed in 3 dimensions!\n\n## Rank deficient $A$ \n\nBut let's see what happens if we do this to several $u$'s:\n\n::: column\n```{r}\n#| echo: true\nset.seed(1100)\nn <- 100\nUmatrix <- matrix(runif(3*n), \n                  nrow = n, \n                  ncol = 3)\nhead(Umatrix) \n```\n::: \n\n::: column\n```{r}\n#| echo: true\nA <- matrix(c(1,4,2,\n              2,5,1,\n              3,6,0\n              ), \n            nrow = 3, ncol = 3, \n            byrow=TRUE\n            )\nUA <- Umatrix %*% A\nhead(UA)\n```\n:::\n\n## Plotting $U$ and $UA$ {.smaller}\n\n::: column\n$U$ is truly 3D:\n```{r}\nlibrary(matlib)\nlibrary(rgl)\npar(mar = c(0,0,0,0), oma = c(0,0,0,0)) # Set margins to zero\nplot3d( \n        x=Umatrix[,1], y=Umatrix[,2], z=Umatrix[,3],colvar=NULL,\n        bty='b2',pch=19,cex=1.2,\n  xlab=\"x\", ylab=\"y\", zlab=\"z\")\nrglwidget(width = 400, height = 400)\n```\n:::\n\n::: column\n$UA$ is collapsed to a 2D plane!\n```{r}\npar(mar = c(0,0,0,0), oma = c(0,0,0,0)) # Set margins to zero\nplot3d( \n        x=UA[,1], y=UA[,2], z=UA[,3],colvar=NULL,\n        bty='b2',pch=19,cex=1.2,\n  xlab=\"x\", ylab=\"y\", zlab=\"z\")\nrglwidget(width = 400, height = 400)\n```\n:::\n\n## What gives with $A$? \n\n$$A =\\begin{pmatrix} 1 & 4 & 2 \\\\ 2 & 5 & 1 \\\\ 3 & 6 & 0 \\end{pmatrix}$$\n\n. . .\n\n$$= \\begin{pmatrix} 1 & 4 & 4-2\\cdot 1 \\\\ 2 & 5 & 5-2\\cdot2 \\\\ 3 & 6 & 6-2\\cdot 3 \\end{pmatrix}$$\n\n. . .\n\nSo the 3rd column is a *linear combination* of the first two!\n\n## Determinants and rank deficiency {.smaller}\n\n-  A *rank deficient* transformation matrix has redundancy in rows or columns\n- In other words, one or more of the columns is a linear combination of the others (equivalent for rows)\n- A *rank deficient*, $p\\times p$ matrix $A$ has determinant = 0\n\n```{r}\n#| echo: true\nA\ndet(A)\n```\n\n- *Determinant* = scalar-valued function of a square matrix\n\n$$det \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} =ad-bc$$\n- ...increasingly more complex for higher $p$! (use `R` in general)\n\n\n\n## Rank deficiency in 2 dimensions {.smaller}\n\nConsider the $n=50$, $p=2$-dimensional vectors in the `cars` data set:\n\n```{r}\n#| fig.width: 3\n#| fig.height: 3\n#| fig.align: center\n\nggplot(data = cars) + \n  geom_point(aes(x = speed, y = dist)) + \n  theme_classic() + \n  labs(x='Speed (mph)', y = 'Stopping distance (ft)')\n```\n\n\n## Rank deficiency in 2 dimensions {.smaller}\n\n- Let's apply the $2 \\times 2$ transformation matrix $A = \\begin{pmatrix} 1 &0\\\\ 0&0\\end{pmatrix}$\n- This collapses the data set down to just its $x$ coordinates: \n\n::: {.column width=\"60%\"}\n```{r}\n#| echo: true\nA <- matrix(c(1,0,\n              0,0\n              ), \n            nrow = 2, ncol = 2,\n            byrow=TRUE\n            )\ndet(A)\ncars_transformed <- data.frame(as.matrix(cars) %*% A)\n```\n:::\n\n::: {.column width=\"40%\"} \n```{r}\n#| fig.width: 4\n#| fig.height: 3\n#| fig.align: center\nggplot() + \n geom_point(aes(x = speed, y = dist, color = '(x,y)'), data = cars) + \n  geom_point(aes(x = X1, y = X2, color = '(x,y)*A'), data = cars_transformed) + \n    labs(x='Speed (mph)', y = 'Stopping distance (ft)',color='') + \n  theme_classic() \n\n```\n:::\n\n## Quiz question 1 \n\nLet $T$ be a transformation matrix represented by:\n\n$$T = \\begin{pmatrix} 1 & 0 \\\\ 2 & -3 \\end{pmatrix}$$\n\nDoes this matrix produce a $2 \\rightarrow 2$ or a $2 \\rightarrow 1$ transformation?\n\nFind the determinant to answer this question!\n\n## Verifying quiz question 1\n\n```{r}\n#| echo: true\n#| eval: false\n\nT <- matrix(c(1, 0, \n              2, -3), \n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\nn <- 20\nsomedata <- matrix(runif(n*2), \n                   nrow = n, ncol = 2)\nsomedata_transformed <- somedata %*% T\nplot(somedata, main = 'somedata')\nplot(somedata_transformed, main = 'somedata_transformed')\n```\n\n\n::: column\n```{r}\n#| fig.width: 3\n#| fig.height: 3\n\nT <- matrix(c(1, 0, \n              2, -3), \n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\nn <- 20\nsomedata <- matrix(runif(n*2), \n                   nrow = n, ncol = 2)\n\nsomedata_transformed <- somedata %*% T\npar(mar = c(5,4,2,0))\nplot(somedata, main = 'somedata', xlab='',ylab='')\n```\n:::\n\n::: column\n```{r}\n#| fig.width: 3\n#| fig.height: 3\npar(mar = c(5,4,2,0))\nplot(somedata_transformed, main = 'somedata_transformed', xlab='',ylab='')\n```\n:::\n\n\n\n## Quiz question 2 \n\nLet $W$ be a transformation matrix represented by:\n\n$$W = \\begin{pmatrix} 1 & 3 \\\\ 2 & 6 \\end{pmatrix}$$\n\nDoes this matrix produce a $2 \\rightarrow 2$ or a $2 \\rightarrow 1$ transformation?  Answer in 2 ways:\n\n- Finding the determinant of the matrix;\n- Identifying in what way the columns are linear combinations of each other\n\n## Verifying quiz question 2\n\n```{r}\n#| echo: true\nW <- matrix(c(1, 3, \n              2, 6), \n            nrow = 2, ncol = 2,\n            byrow = TRUE\n            )\nsomedata_transformed <- somedata %*% W\n```\n\n\n::: column\n```{r}\n#| fig.width: 4\n#| fig.height: 4\npar(mar = c(5,4,2,0))\nplot(somedata, main = 'somedata', xlab='',ylab='')\n```\n:::\n\n::: column\n```{r}\n#| fig.width: 4\n#| fig.height: 4\npar(mar = c(5,4,2,0))\nplot(somedata_transformed, main = 'somedata_transformed', xlab='',ylab='')\n```\n:::\n\n\n\n\n\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"2 - linear transformations.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.32","auto-stretch":true,"editor":"visual","title":"1.2 - linear transformations","editor_options":{"chunk_output_type":"console","mode":"source"},"slideNumber":true}}},"projectFormats":[]}